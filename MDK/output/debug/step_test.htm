<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\debug\step_test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\debug\step_test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Jul 15 11:15:29 2025
<BR><P>
<H3>Maximum Stack Usage =        148 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Stepper_Move_S &rArr; Calcspeed_e &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[8f]">IRQ133_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f]">IRQ133_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9d]">INT_SRC_TMRA_1_OVF_IrqCallback</a> from tim.o(i.INT_SRC_TMRA_1_OVF_IrqCallback) referenced from tim.o(i.App_IntCfg)
 <LI><a href="#[9e]">INT_SRC_TMRA_3_CMP_IrqCallback</a> from tim.o(i.INT_SRC_TMRA_3_CMP_IrqCallback) referenced from tim.o(i.App_IntCfg)
 <LI><a href="#[9f]">INT_SRC_TMRA_3_OVF_IrqCallback</a> from tim.o(i.INT_SRC_TMRA_3_OVF_IrqCallback) referenced from tim.o(i.App_IntCfg)
 <LI><a href="#[a]">IRQ000_Handler</a> from hc32_ll_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b]">IRQ001_Handler</a> from hc32_ll_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[c]">IRQ002_Handler</a> from hc32_ll_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[d]">IRQ003_Handler</a> from hc32_ll_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[e]">IRQ004_Handler</a> from hc32_ll_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[f]">IRQ005_Handler</a> from hc32_ll_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[10]">IRQ006_Handler</a> from hc32_ll_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[11]">IRQ007_Handler</a> from hc32_ll_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[12]">IRQ008_Handler</a> from hc32_ll_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[13]">IRQ009_Handler</a> from hc32_ll_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[14]">IRQ010_Handler</a> from hc32_ll_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[15]">IRQ011_Handler</a> from hc32_ll_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[16]">IRQ012_Handler</a> from hc32_ll_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[17]">IRQ013_Handler</a> from hc32_ll_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[18]">IRQ014_Handler</a> from hc32_ll_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[19]">IRQ015_Handler</a> from hc32_ll_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1a]">IRQ016_Handler</a> from hc32_ll_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1b]">IRQ017_Handler</a> from hc32_ll_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1c]">IRQ018_Handler</a> from hc32_ll_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1d]">IRQ019_Handler</a> from hc32_ll_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1e]">IRQ020_Handler</a> from hc32_ll_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1f]">IRQ021_Handler</a> from hc32_ll_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[20]">IRQ022_Handler</a> from hc32_ll_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[21]">IRQ023_Handler</a> from hc32_ll_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[22]">IRQ024_Handler</a> from hc32_ll_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[23]">IRQ025_Handler</a> from hc32_ll_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[24]">IRQ026_Handler</a> from hc32_ll_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[25]">IRQ027_Handler</a> from hc32_ll_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[26]">IRQ028_Handler</a> from hc32_ll_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[27]">IRQ029_Handler</a> from hc32_ll_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[28]">IRQ030_Handler</a> from hc32_ll_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[29]">IRQ031_Handler</a> from hc32_ll_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2a]">IRQ032_Handler</a> from hc32_ll_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2b]">IRQ033_Handler</a> from hc32_ll_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2c]">IRQ034_Handler</a> from hc32_ll_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2d]">IRQ035_Handler</a> from hc32_ll_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2e]">IRQ036_Handler</a> from hc32_ll_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2f]">IRQ037_Handler</a> from hc32_ll_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[30]">IRQ038_Handler</a> from hc32_ll_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[31]">IRQ039_Handler</a> from hc32_ll_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[32]">IRQ040_Handler</a> from hc32_ll_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[33]">IRQ041_Handler</a> from hc32_ll_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[34]">IRQ042_Handler</a> from hc32_ll_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[35]">IRQ043_Handler</a> from hc32_ll_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[36]">IRQ044_Handler</a> from hc32_ll_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[37]">IRQ045_Handler</a> from hc32_ll_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[38]">IRQ046_Handler</a> from hc32_ll_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[39]">IRQ047_Handler</a> from hc32_ll_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3a]">IRQ048_Handler</a> from hc32_ll_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3b]">IRQ049_Handler</a> from hc32_ll_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3c]">IRQ050_Handler</a> from hc32_ll_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3d]">IRQ051_Handler</a> from hc32_ll_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3e]">IRQ052_Handler</a> from hc32_ll_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3f]">IRQ053_Handler</a> from hc32_ll_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[40]">IRQ054_Handler</a> from hc32_ll_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[41]">IRQ055_Handler</a> from hc32_ll_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[42]">IRQ056_Handler</a> from hc32_ll_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[43]">IRQ057_Handler</a> from hc32_ll_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[44]">IRQ058_Handler</a> from hc32_ll_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[45]">IRQ059_Handler</a> from hc32_ll_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[46]">IRQ060_Handler</a> from hc32_ll_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[47]">IRQ061_Handler</a> from hc32_ll_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[48]">IRQ062_Handler</a> from hc32_ll_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[49]">IRQ063_Handler</a> from hc32_ll_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4a]">IRQ064_Handler</a> from hc32_ll_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4b]">IRQ065_Handler</a> from hc32_ll_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4c]">IRQ066_Handler</a> from hc32_ll_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4d]">IRQ067_Handler</a> from hc32_ll_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4e]">IRQ068_Handler</a> from hc32_ll_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4f]">IRQ069_Handler</a> from hc32_ll_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[50]">IRQ070_Handler</a> from hc32_ll_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[51]">IRQ071_Handler</a> from hc32_ll_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[52]">IRQ072_Handler</a> from hc32_ll_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[53]">IRQ073_Handler</a> from hc32_ll_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[54]">IRQ074_Handler</a> from hc32_ll_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[55]">IRQ075_Handler</a> from hc32_ll_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[56]">IRQ076_Handler</a> from hc32_ll_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[57]">IRQ077_Handler</a> from hc32_ll_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[58]">IRQ078_Handler</a> from hc32_ll_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[59]">IRQ079_Handler</a> from hc32_ll_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5a]">IRQ080_Handler</a> from hc32_ll_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5b]">IRQ081_Handler</a> from hc32_ll_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5c]">IRQ082_Handler</a> from hc32_ll_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5d]">IRQ083_Handler</a> from hc32_ll_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5e]">IRQ084_Handler</a> from hc32_ll_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5f]">IRQ085_Handler</a> from hc32_ll_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[60]">IRQ086_Handler</a> from hc32_ll_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[61]">IRQ087_Handler</a> from hc32_ll_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[62]">IRQ088_Handler</a> from hc32_ll_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[63]">IRQ089_Handler</a> from hc32_ll_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[64]">IRQ090_Handler</a> from hc32_ll_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[65]">IRQ091_Handler</a> from hc32_ll_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[66]">IRQ092_Handler</a> from hc32_ll_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[67]">IRQ093_Handler</a> from hc32_ll_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[68]">IRQ094_Handler</a> from hc32_ll_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[69]">IRQ095_Handler</a> from hc32_ll_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6a]">IRQ096_Handler</a> from hc32_ll_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6b]">IRQ097_Handler</a> from hc32_ll_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6c]">IRQ098_Handler</a> from hc32_ll_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6d]">IRQ099_Handler</a> from hc32_ll_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6e]">IRQ100_Handler</a> from hc32_ll_interrupts.o(i.IRQ100_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6f]">IRQ101_Handler</a> from hc32_ll_interrupts.o(i.IRQ101_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[70]">IRQ102_Handler</a> from hc32_ll_interrupts.o(i.IRQ102_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[71]">IRQ103_Handler</a> from hc32_ll_interrupts.o(i.IRQ103_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[72]">IRQ104_Handler</a> from hc32_ll_interrupts.o(i.IRQ104_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[73]">IRQ105_Handler</a> from hc32_ll_interrupts.o(i.IRQ105_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[74]">IRQ106_Handler</a> from hc32_ll_interrupts.o(i.IRQ106_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[75]">IRQ107_Handler</a> from hc32_ll_interrupts.o(i.IRQ107_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[76]">IRQ108_Handler</a> from hc32_ll_interrupts.o(i.IRQ108_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[77]">IRQ109_Handler</a> from hc32_ll_interrupts.o(i.IRQ109_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[78]">IRQ110_Handler</a> from hc32_ll_interrupts.o(i.IRQ110_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[79]">IRQ111_Handler</a> from hc32_ll_interrupts.o(i.IRQ111_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7a]">IRQ112_Handler</a> from hc32_ll_interrupts.o(i.IRQ112_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7b]">IRQ113_Handler</a> from hc32_ll_interrupts.o(i.IRQ113_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7c]">IRQ114_Handler</a> from hc32_ll_interrupts.o(i.IRQ114_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7d]">IRQ115_Handler</a> from hc32_ll_interrupts.o(i.IRQ115_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7e]">IRQ116_Handler</a> from hc32_ll_interrupts.o(i.IRQ116_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7f]">IRQ117_Handler</a> from hc32_ll_interrupts.o(i.IRQ117_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[80]">IRQ118_Handler</a> from hc32_ll_interrupts.o(i.IRQ118_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[81]">IRQ119_Handler</a> from hc32_ll_interrupts.o(i.IRQ119_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[82]">IRQ120_Handler</a> from hc32_ll_interrupts.o(i.IRQ120_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[83]">IRQ121_Handler</a> from hc32_ll_interrupts.o(i.IRQ121_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[84]">IRQ122_Handler</a> from hc32_ll_interrupts.o(i.IRQ122_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[85]">IRQ123_Handler</a> from hc32_ll_interrupts.o(i.IRQ123_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[86]">IRQ124_Handler</a> from hc32_ll_interrupts.o(i.IRQ124_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[87]">IRQ125_Handler</a> from hc32_ll_interrupts.o(i.IRQ125_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[88]">IRQ126_Handler</a> from hc32_ll_interrupts.o(i.IRQ126_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[89]">IRQ127_Handler</a> from hc32_ll_interrupts.o(i.IRQ127_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8a]">IRQ128_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ128_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8b]">IRQ129_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ129_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8c]">IRQ130_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ130_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8d]">IRQ131_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ131_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8e]">IRQ132_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ132_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8f]">IRQ133_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[90]">IRQ134_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[91]">IRQ135_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[92]">IRQ136_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ136_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[93]">IRQ137_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ137_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[94]">IRQ138_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ138_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[95]">IRQ139_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ139_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[96]">IRQ140_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ140_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[97]">IRQ141_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ141_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[98]">IRQ142_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ142_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[99]">IRQ143_Handler</a> from hc32f460_ll_interrupts_share.o(i.IRQ143_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9b]">SystemInit</a> from system_hc32f460.o(i.SystemInit) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[9a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[1d8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[17e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1d9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1da]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1db]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1dc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1dd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Decision_S
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcspeed_e
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcspeed_e
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcspeed_e
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SRC_TMRA_1_OVF_IrqCallback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcspeed_e
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcspeed_e
</UL>

<P><STRONG><a name="[a1]"></a>ADC1_ChCmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.ADC1_ChCmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[1e2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>ADC1_SeqA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.ADC1_SeqA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[a3]"></a>ADC1_SeqB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.ADC1_SeqB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[a4]"></a>ADC1_SeqCmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.ADC1_SeqCmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[a5]"></a>ADC2_ChCmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.ADC2_ChCmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[a6]"></a>ADC2_SeqA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.ADC2_SeqA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcspeed_e
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Decision_S
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcspeed_e
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Move_S
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcspeed_e
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Decision_S
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Move_S
</UL>

<P><STRONG><a name="[185]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[184]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1d3]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[1e3]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[17f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1e4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>ADC2_SeqB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.ADC2_SeqB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[a8]"></a>ADC2_SeqCmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.ADC2_SeqCmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ142_Handler
</UL>

<P><STRONG><a name="[18c]"></a>App_ClkCfg</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tim.o(i.App_ClkCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_ClkCfg &rArr; CLK_PLLInit &rArr; CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalStructInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLStructInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>App_IntCfg</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tim.o(i.App_IntCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_IntCfg &rArr; INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>App_PortCfg</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, control_step.o(i.App_PortCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_PortCfg &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>App_SPIxCfg</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, mp6602.o(i.App_SPIxCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = App_SPIxCfg &rArr; FCG_Fcg1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetSSValidLevel
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetLoopbackMode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSPinSelect
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ParityCheckCmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayTimeConfig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayStructInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>App_TimerACfg</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, tim.o(i.App_TimerACfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_TimerACfg &rArr; TMRA_PWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_StructInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_SetFunc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_PWM_StructInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_PWM_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_PWM_OutputCmd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_IntCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>CAN_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.CAN_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[1b5]"></a>CLK_GetStableStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32_ll_clk.o(i.CLK_GetStableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>

<P><STRONG><a name="[1b6]"></a>CLK_PLLCmd</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_PLLCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
</UL>

<P><STRONG><a name="[193]"></a>CLK_PLLInit</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, hc32_ll_clk.o(i.CLK_PLLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLK_PLLInit &rArr; CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>

<P><STRONG><a name="[192]"></a>CLK_PLLStructInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, hc32_ll_clk.o(i.CLK_PLLStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>

<P><STRONG><a name="[18d]"></a>CLK_SetClockDiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_SetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetClockDiv &rArr; SetSysClockDiv &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>

<P><STRONG><a name="[196]"></a>CLK_SetSysClockSrc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_clk.o(i.CLK_SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetSysClockSrc &rArr; SetSysClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>

<P><STRONG><a name="[1bb]"></a>CLK_XtalCmd</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_XtalCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
</UL>

<P><STRONG><a name="[191]"></a>CLK_XtalInit</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, hc32_ll_clk.o(i.CLK_XtalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_XtalInit &rArr; CLK_XtalCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>

<P><STRONG><a name="[aa]"></a>CLK_XtalStop_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.CLK_XtalStop_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[190]"></a>CLK_XtalStructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hc32_ll_clk.o(i.CLK_XtalStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>

<P><STRONG><a name="[ab]"></a>DCU1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DCU1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[ac]"></a>DCU2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DCU2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[ad]"></a>DCU3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DCU3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[ae]"></a>DCU4_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DCU4_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[a0]"></a>DDL_AssertHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hc32_ll_utility.o(i.DDL_AssertHandler))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_SetFunc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_PWM_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_ClearStatus
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_SetPeriodValue
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_SetCountValue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_SetCompareValue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_PWM_OutputCmd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_IntCmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_GetCountValue
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetSSValidLevel
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetLoopbackMode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSPinSelect
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ParityCheckCmd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayTimeConfig
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>

<P><STRONG><a name="[1c9]"></a>DDL_DelayUS</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hc32_ll_utility.o(i.DDL_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DDL_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
</UL>

<P><STRONG><a name="[af]"></a>DMA1_BTC0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_BTC0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[b0]"></a>DMA1_BTC1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_BTC1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[b1]"></a>DMA1_BTC2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_BTC2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[b2]"></a>DMA1_BTC3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_BTC3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[b3]"></a>DMA1_Error0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_Error0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[b4]"></a>DMA1_Error1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_Error1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[b5]"></a>DMA1_Error2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_Error2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[b6]"></a>DMA1_Error3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_Error3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[b7]"></a>DMA1_TC0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_TC0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[b8]"></a>DMA1_TC1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_TC1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[b9]"></a>DMA1_TC2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_TC2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[ba]"></a>DMA1_TC3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA1_TC3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[bb]"></a>DMA2_BTC0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_BTC0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[bc]"></a>DMA2_BTC1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_BTC1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[bd]"></a>DMA2_BTC2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_BTC2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[be]"></a>DMA2_BTC3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_BTC3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[bf]"></a>DMA2_Error0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_Error0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c0]"></a>DMA2_Error1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_Error1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c1]"></a>DMA2_Error2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_Error2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c2]"></a>DMA2_Error3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_Error3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c3]"></a>DMA2_TC0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_TC0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c4]"></a>DMA2_TC1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_TC1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c5]"></a>DMA2_TC2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_TC2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c6]"></a>DMA2_TC3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.DMA2_TC3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c7]"></a>EFM_ColError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EFM_ColError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c8]"></a>EFM_OpEnd_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EFM_OpEnd_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[c9]"></a>EFM_ProgramEraseError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EFM_ProgramEraseError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[18f]"></a>EFM_SetWaitCycle</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hc32_ll_efm.o(i.EFM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFM_SetWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>

<P><STRONG><a name="[ca]"></a>EMB_GR0_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EMB_GR0_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[cb]"></a>EMB_GR1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EMB_GR1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[cc]"></a>EMB_GR2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EMB_GR2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[cd]"></a>EMB_GR3_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EMB_GR3_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[ce]"></a>EXTINT00_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT00_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[cf]"></a>EXTINT01_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT01_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[d0]"></a>EXTINT02_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT02_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[d1]"></a>EXTINT03_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT03_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[d2]"></a>EXTINT04_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT04_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[d3]"></a>EXTINT05_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT05_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[d4]"></a>EXTINT06_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT06_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[d5]"></a>EXTINT07_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT07_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[d6]"></a>EXTINT08_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT08_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[d7]"></a>EXTINT09_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT09_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[d8]"></a>EXTINT10_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT10_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[d9]"></a>EXTINT11_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT11_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[da]"></a>EXTINT12_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT12_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[db]"></a>EXTINT13_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT13_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[dc]"></a>EXTINT14_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT14_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[dd]"></a>EXTINT15_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.EXTINT15_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>

<P><STRONG><a name="[1a1]"></a>FCG_Fcg1PeriphClockCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32_ll_fcg.o(i.FCG_Fcg1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCG_Fcg1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
</UL>

<P><STRONG><a name="[1ac]"></a>FCG_Fcg2PeriphClockCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32_ll_fcg.o(i.FCG_Fcg2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCG_Fcg2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimerACfg
</UL>

<P><STRONG><a name="[de]"></a>FCM_End_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.FCM_End_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[df]"></a>FCM_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.FCM_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[e0]"></a>FCM_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.FCM_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[19e]"></a>GPIO_Init</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, hc32_ll_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PortCfg
</UL>

<P><STRONG><a name="[1c1]"></a>GPIO_ResetPins</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hc32_ll_gpio.o(i.GPIO_ResetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Move_S
</UL>

<P><STRONG><a name="[19f]"></a>GPIO_SetFunc</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, hc32_ll_gpio.o(i.GPIO_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PortCfg
</UL>

<P><STRONG><a name="[1c2]"></a>GPIO_SetPins</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hc32_ll_gpio.o(i.GPIO_SetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_start
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Move_S
</UL>

<P><STRONG><a name="[194]"></a>GPIO_SetReadWaitCycle</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hc32_ll_gpio.o(i.GPIO_SetReadWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetReadWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>

<P><STRONG><a name="[19d]"></a>GPIO_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hc32_ll_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PortCfg
</UL>

<P><STRONG><a name="[e1]"></a>I2C1_EE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C1_EE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[e2]"></a>I2C1_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C1_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[e3]"></a>I2C1_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C1_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[e4]"></a>I2C1_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C1_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[e5]"></a>I2C2_EE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C2_EE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[e6]"></a>I2C2_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C2_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[e7]"></a>I2C2_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C2_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[e8]"></a>I2C2_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C2_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[e9]"></a>I2C3_EE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C3_EE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[ea]"></a>I2C3_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C3_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[eb]"></a>I2C3_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C3_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[ec]"></a>I2C3_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2C3_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[ed]"></a>I2S1_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S1_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[ee]"></a>I2S1_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S1_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[ef]"></a>I2S1_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S1_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[f0]"></a>I2S2_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S2_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[f1]"></a>I2S2_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S2_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[f2]"></a>I2S2_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S2_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[f3]"></a>I2S3_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S3_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[f4]"></a>I2S3_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S3_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[f5]"></a>I2S3_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S3_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[f6]"></a>I2S4_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S4_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[f7]"></a>I2S4_Rx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S4_Rx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[f8]"></a>I2S4_Tx_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.I2S4_Tx_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ140_Handler
</UL>

<P><STRONG><a name="[198]"></a>INTC_IrqSignIn</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, hc32_ll_interrupts.o(i.INTC_IrqSignIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IntCfg
</UL>

<P><STRONG><a name="[a]"></a>IRQ000_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ001_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ002_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ003_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ004_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ005_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ006_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ007_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ008_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ009_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ010_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ011_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ012_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ013_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ014_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ015_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ016_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ017_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ018_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ019_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ020_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ021_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ022_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ023_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ024_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ025_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ026_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ027_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ028_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ029_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ030_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ031_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ032_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ033_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ034_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ035_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ036_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ037_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ038_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ039_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ040_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ041_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ042_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ043_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ044_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ045_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ046_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ047_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ048_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ049_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ050_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ051_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ052_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ053_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ054_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ055_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ056_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ057_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ058_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ059_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ060_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ061_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ062_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ063_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ064_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ065_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ066_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ067_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ068_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ069_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ070_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ071_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ072_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ073_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ074_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ075_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ076_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ077_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ078_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ079_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ080_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ081_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ082_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ083_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ084_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ085_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ086_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ087_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ088_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ089_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ090_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ091_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ092_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ093_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ094_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ095_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ096_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ097_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ098_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ099_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ100_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ101_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ102_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ103_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ104_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ105_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ106_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ107_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ108_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ109_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ110_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ111_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ112_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ113_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ114_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ115_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ116_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ117_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ118_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ119_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ120_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ121_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ122_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ123_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ124_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ125_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ126_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ127_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(i.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ128_Handler</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, hc32f460_ll_interrupts_share.o(i.IRQ128_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ128_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT15_IrqHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT14_IrqHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT13_IrqHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT12_IrqHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT11_IrqHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT10_IrqHandler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT09_IrqHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT08_IrqHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT07_IrqHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT06_IrqHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT05_IrqHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT04_IrqHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT03_IrqHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT02_IrqHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT01_IrqHandler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT00_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ129_Handler</STRONG> (Thumb, 1168 bytes, Stack size 16 bytes, hc32f460_ll_interrupts_share.o(i.IRQ129_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ129_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Error_IrqHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ProgramEraseError_IrqHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_OpEnd_IrqHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ColError_IrqHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC3_IrqHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC2_IrqHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC1_IrqHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_TC0_IrqHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error3_IrqHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error2_IrqHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error1_IrqHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Error0_IrqHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC3_IrqHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC2_IrqHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC1_IrqHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_BTC0_IrqHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC3_IrqHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC2_IrqHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC1_IrqHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_TC0_IrqHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error3_IrqHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error2_IrqHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error1_IrqHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Error0_IrqHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC3_IrqHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC2_IrqHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC1_IrqHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_BTC0_IrqHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU4_IrqHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU3_IrqHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU2_IrqHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCU1_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ130_Handler</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, hc32f460_ll_interrupts_share.o(i.IRQ130_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ130_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_2_CmpB_IrqHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_2_CmpA_IrqHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_1_CmpB_IrqHandler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_1_CmpA_IrqHandler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWDT_IrqHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_WakeupTimer_IrqHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalStop_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ131_Handler</STRONG> (Thumb, 684 bytes, Stack size 16 bytes, hc32f460_ll_interrupts_share.o(i.IRQ131_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ131_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_SCmpA_IrqHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GUdf_IrqHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GOvf_IrqHandler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GDte_IrqHandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpF_IrqHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpE_IrqHandler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpD_IrqHandler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpC_IrqHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpB_IrqHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_GCmpA_IrqHandler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_SCmpB_IrqHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_SCmpA_IrqHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GUdf_IrqHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GOvf_IrqHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GDte_IrqHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpF_IrqHandler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpE_IrqHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpD_IrqHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpC_IrqHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpB_IrqHandler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_1_GCmpA_IrqHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_2_SCmpB_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ132_Handler</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, hc32f460_ll_interrupts_share.o(i.IRQ132_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ132_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_SCmpB_IrqHandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_SCmpA_IrqHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GUdf_IrqHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GOvf_IrqHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GDte_IrqHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpF_IrqHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpE_IrqHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpD_IrqHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpC_IrqHandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpB_IrqHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_3_GCmpA_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ136_Handler</STRONG> (Thumb, 762 bytes, Stack size 16 bytes, hc32f460_ll_interrupts_share.o(i.IRQ136_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ136_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_Global_IrqHandler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_TxEmpty_IrqHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_TxComplete_IrqHandler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxTO_IrqHandler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxFull_IrqHandler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxError_IrqHandler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TxEmpty_IrqHandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TxComplete_IrqHandler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTO_IrqHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxFull_IrqHandler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxError_IrqHandler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Udf_IrqHandler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Ovf_IrqHandler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_6_Cmp_IrqHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Udf_IrqHandler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Ovf_IrqHandler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_5_Cmp_IrqHandler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Udf_IrqHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Ovf_IrqHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_4_Cmp_IrqHandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Udf_IrqHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Ovf_IrqHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_3_Cmp_IrqHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Udf_IrqHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Ovf_IrqHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_2_Cmp_IrqHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Udf_IrqHandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Ovf_IrqHandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_1_Cmp_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ137_Handler</STRONG> (Thumb, 620 bytes, Stack size 16 bytes, hc32f460_ll_interrupts_share.o(i.IRQ137_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ137_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_TxEmpty_IrqHandler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_RxFull_IrqHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_Idle_IrqHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_Error_IrqHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_TxEmpty_IrqHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_RxFull_IrqHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Idle_IrqHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Error_IrqHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_TxEmpty_IrqHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_RxFull_IrqHandler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Idle_IrqHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Error_IrqHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TxEmpty_IrqHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_RxFull_IrqHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Idle_IrqHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Error_IrqHandler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_TxEmpty_IrqHandler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_TxComplete_IrqHandler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_RxTO_IrqHandler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_RxFull_IrqHandler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_RxError_IrqHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TxEmpty_IrqHandler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TxComplete_IrqHandler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxTO_IrqHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxFull_IrqHandler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxError_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ138_Handler</STRONG> (Thumb, 548 bytes, Stack size 16 bytes, hc32f460_ll_interrupts_share.o(i.IRQ138_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ138_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_ReloadW_IrqHandler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_ReloadV_IrqHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_ReloadU_IrqHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GUdf_IrqHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GOvf_IrqHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpWL_IrqHandler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpWH_IrqHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpVL_IrqHandler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_2_GCmpVH_IrqHandler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_ReloadW_IrqHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_ReloadV_IrqHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_ReloadU_IrqHandler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GUdf_IrqHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GOvf_IrqHandler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpWL_IrqHandler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpWH_IrqHandler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpVL_IrqHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpVH_IrqHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpUL_IrqHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_GCmpUH_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ139_Handler</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, hc32f460_ll_interrupts_share.o(i.IRQ139_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ139_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_ReloadW_IrqHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_ReloadV_IrqHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GUdf_IrqHandler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GOvf_IrqHandler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpWL_IrqHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpWH_IrqHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpVL_IrqHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpVH_IrqHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpUL_IrqHandler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_3_GCmpUH_IrqHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_1_ReloadU_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ140_Handler</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, hc32f460_ll_interrupts_share.o(i.IRQ140_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ140_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Tx_IrqHandler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Rx_IrqHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S4_Error_IrqHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S3_Tx_IrqHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S3_Rx_IrqHandler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S3_Error_IrqHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Tx_IrqHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Rx_IrqHandler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Error_IrqHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S1_Tx_IrqHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S1_Rx_IrqHandler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S1_Error_IrqHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR3_IrqHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR2_IrqHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR1_IrqHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMB_GR0_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ141_Handler</STRONG> (Thumb, 554 bytes, Stack size 16 bytes, hc32f460_ll_interrupts_share.o(i.IRQ141_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ141_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_LVD2_IrqHandler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_LVD1_IrqHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_TxEmpty_IrqHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_TxComplete_IrqHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_RxFull_IrqHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_EE_IrqHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_TxEmpty_IrqHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_TxComplete_IrqHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_RxFull_IrqHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EE_IrqHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_TxEmpty_IrqHandler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_TxComplete_IrqHandler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_RxFull_IrqHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EE_IrqHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_Ovf_IrqHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_Error_IrqHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCM_End_IrqHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ142_Handler</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, hc32f460_ll_interrupts_share.o(i.IRQ142_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ142_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_SeqCmp_IrqHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_SeqB_IrqHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_SeqA_IrqHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_ChCmp_IrqHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_SeqCmp_IrqHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_SeqB_IrqHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_SeqA_IrqHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_ChCmp_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ143_Handler</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, hc32f460_ll_interrupts_share.o(i.IRQ143_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ143_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC2_IrqHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC1_IrqHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1c5]"></a>LL_PERIPH_WE</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, hc32_ll.o(i.LL_PERIPH_WE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_PERIPH_WE
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_REG_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c7]"></a>LL_PERIPH_WP</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, hc32_ll.o(i.LL_PERIPH_WP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_PERIPH_WP
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_REG_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>PWC_HighSpeedToHighPerformance</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hc32_ll_pwc.o(i.PWC_HighSpeedToHighPerformance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_HighSpeedToHighPerformance &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>

<P><STRONG><a name="[f9]"></a>PWC_LVD1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.PWC_LVD1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[fa]"></a>PWC_LVD2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.PWC_LVD2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[fb]"></a>PWC_WakeupTimer_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.PWC_WakeupTimer_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[fc]"></a>QSPI_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.QSPI_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ129_Handler
</UL>

<P><STRONG><a name="[fd]"></a>SDIOC1_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SDIOC1_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[fe]"></a>SDIOC2_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SDIOC2_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ143_Handler
</UL>

<P><STRONG><a name="[ff]"></a>SPI1_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI1_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[100]"></a>SPI1_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI1_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[101]"></a>SPI1_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI1_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[102]"></a>SPI1_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI1_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[103]"></a>SPI2_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI2_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[104]"></a>SPI2_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI2_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[105]"></a>SPI2_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI2_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[106]"></a>SPI2_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI2_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[107]"></a>SPI3_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI3_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[108]"></a>SPI3_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI3_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[109]"></a>SPI3_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI3_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[10a]"></a>SPI3_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI3_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[10b]"></a>SPI4_Error_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI4_Error_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[10c]"></a>SPI4_Idle_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI4_Idle_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[10d]"></a>SPI4_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI4_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[10e]"></a>SPI4_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SPI4_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[1aa]"></a>SPI_Cmd</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hc32_ll_spi.o(i.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
</UL>

<P><STRONG><a name="[1a4]"></a>SPI_DelayStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32_ll_spi.o(i.SPI_DelayStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
</UL>

<P><STRONG><a name="[1a5]"></a>SPI_DelayTimeConfig</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, hc32_ll_spi.o(i.SPI_DelayTimeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DelayTimeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
</UL>

<P><STRONG><a name="[1a3]"></a>SPI_Init</STRONG> (Thumb, 642 bytes, Stack size 16 bytes, hc32_ll_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
</UL>

<P><STRONG><a name="[1a7]"></a>SPI_ParityCheckCmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hc32_ll_spi.o(i.SPI_ParityCheckCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_ParityCheckCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
</UL>

<P><STRONG><a name="[1a8]"></a>SPI_SSPinSelect</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, hc32_ll_spi.o(i.SPI_SSPinSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SSPinSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
</UL>

<P><STRONG><a name="[1a6]"></a>SPI_SetLoopbackMode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hc32_ll_spi.o(i.SPI_SetLoopbackMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SetLoopbackMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
</UL>

<P><STRONG><a name="[1a9]"></a>SPI_SetSSValidLevel</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, hc32_ll_spi.o(i.SPI_SetSSValidLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SetSSValidLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
</UL>

<P><STRONG><a name="[1a2]"></a>SPI_StructInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hc32_ll_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
</UL>

<P><STRONG><a name="[18e]"></a>SRAM_SetWaitCycle</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, hc32_ll_sram.o(i.SRAM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SRAM_SetWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>

<P><STRONG><a name="[10f]"></a>SWDT_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.SWDT_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[1c4]"></a>Speed_Decision_S</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, control_step.o(i.Speed_Decision_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Speed_Decision_S &rArr; TMRA_SetCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_SetCompareValue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_PWM_OutputCmd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_IntCmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_GetCountValue
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SRC_TMRA_3_CMP_IrqCallback
</UL>

<P><STRONG><a name="[1ce]"></a>Stepper_Move_S</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, control_step.o(i.Stepper_Move_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Stepper_Move_S &rArr; Calcspeed_e &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_SetCountValue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_SetCompareValue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_PWM_OutputCmd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_IntCmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcspeed_e
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d0]"></a>Stepper_start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, control_step.o(i.Stepper_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Stepper_start &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_hc32f460.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9b]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, system_hc32f460.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>TMR0_1_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR0_1_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[111]"></a>TMR0_1_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR0_1_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[112]"></a>TMR0_2_CmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR0_2_CmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[113]"></a>TMR0_2_CmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR0_2_CmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ130_Handler
</UL>

<P><STRONG><a name="[114]"></a>TMR4_1_GCmpUH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_GCmpUH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[115]"></a>TMR4_1_GCmpUL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_GCmpUL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[116]"></a>TMR4_1_GCmpVH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_GCmpVH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[117]"></a>TMR4_1_GCmpVL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_GCmpVL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[118]"></a>TMR4_1_GCmpWH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_GCmpWH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[119]"></a>TMR4_1_GCmpWL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_GCmpWL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[11a]"></a>TMR4_1_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[11b]"></a>TMR4_1_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[11c]"></a>TMR4_1_ReloadU_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_ReloadU_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[11d]"></a>TMR4_1_ReloadV_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_ReloadV_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[11e]"></a>TMR4_1_ReloadW_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_1_ReloadW_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[11f]"></a>TMR4_2_GCmpUH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_GCmpUH_IrqHandler), UNUSED, KEPT)

<P><STRONG><a name="[120]"></a>TMR4_2_GCmpUL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_GCmpUL_IrqHandler), UNUSED, KEPT)

<P><STRONG><a name="[121]"></a>TMR4_2_GCmpVH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_GCmpVH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[122]"></a>TMR4_2_GCmpVL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_GCmpVL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[123]"></a>TMR4_2_GCmpWH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_GCmpWH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[124]"></a>TMR4_2_GCmpWL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_GCmpWL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[125]"></a>TMR4_2_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[126]"></a>TMR4_2_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[127]"></a>TMR4_2_ReloadU_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_ReloadU_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[128]"></a>TMR4_2_ReloadV_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_ReloadV_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[129]"></a>TMR4_2_ReloadW_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_2_ReloadW_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ138_Handler
</UL>

<P><STRONG><a name="[12a]"></a>TMR4_3_GCmpUH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_GCmpUH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[12b]"></a>TMR4_3_GCmpUL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_GCmpUL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[12c]"></a>TMR4_3_GCmpVH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_GCmpVH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[12d]"></a>TMR4_3_GCmpVL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_GCmpVL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[12e]"></a>TMR4_3_GCmpWH_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_GCmpWH_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[12f]"></a>TMR4_3_GCmpWL_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_GCmpWL_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[130]"></a>TMR4_3_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[131]"></a>TMR4_3_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[132]"></a>TMR4_3_ReloadU_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_ReloadU_IrqHandler), UNUSED, KEPT)

<P><STRONG><a name="[133]"></a>TMR4_3_ReloadV_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_ReloadV_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[134]"></a>TMR4_3_ReloadW_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR4_3_ReloadW_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ139_Handler
</UL>

<P><STRONG><a name="[135]"></a>TMR6_1_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[136]"></a>TMR6_1_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[137]"></a>TMR6_1_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[138]"></a>TMR6_1_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[139]"></a>TMR6_1_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[13a]"></a>TMR6_1_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[13b]"></a>TMR6_1_GDte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_GDte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[13c]"></a>TMR6_1_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[13d]"></a>TMR6_1_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[13e]"></a>TMR6_1_SCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_SCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[13f]"></a>TMR6_1_SCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_1_SCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[140]"></a>TMR6_2_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[141]"></a>TMR6_2_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[142]"></a>TMR6_2_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[143]"></a>TMR6_2_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[144]"></a>TMR6_2_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[145]"></a>TMR6_2_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[146]"></a>TMR6_2_GDte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_GDte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[147]"></a>TMR6_2_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[148]"></a>TMR6_2_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[149]"></a>TMR6_2_SCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_SCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[14a]"></a>TMR6_2_SCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_2_SCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ131_Handler
</UL>

<P><STRONG><a name="[14b]"></a>TMR6_3_GCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_GCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[14c]"></a>TMR6_3_GCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_GCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[14d]"></a>TMR6_3_GCmpC_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_GCmpC_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[14e]"></a>TMR6_3_GCmpD_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_GCmpD_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[14f]"></a>TMR6_3_GCmpE_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_GCmpE_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[150]"></a>TMR6_3_GCmpF_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_GCmpF_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[151]"></a>TMR6_3_GDte_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_GDte_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[152]"></a>TMR6_3_GOvf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_GOvf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[153]"></a>TMR6_3_GUdf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_GUdf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[154]"></a>TMR6_3_SCmpA_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_SCmpA_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[155]"></a>TMR6_3_SCmpB_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMR6_3_SCmpB_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ132_Handler
</UL>

<P><STRONG><a name="[156]"></a>TMRA_1_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_1_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[157]"></a>TMRA_1_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_1_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[158]"></a>TMRA_1_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_1_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[159]"></a>TMRA_2_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_2_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[15a]"></a>TMRA_2_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_2_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[15b]"></a>TMRA_2_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_2_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[15c]"></a>TMRA_3_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_3_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[15d]"></a>TMRA_3_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_3_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[15e]"></a>TMRA_3_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_3_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[15f]"></a>TMRA_4_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_4_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[160]"></a>TMRA_4_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_4_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[161]"></a>TMRA_4_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_4_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[162]"></a>TMRA_5_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_5_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[163]"></a>TMRA_5_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_5_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[164]"></a>TMRA_5_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_5_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[165]"></a>TMRA_6_Cmp_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_6_Cmp_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[166]"></a>TMRA_6_Ovf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_6_Ovf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[167]"></a>TMRA_6_Udf_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.TMRA_6_Udf_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[1c3]"></a>TMRA_ClearStatus</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hc32_ll_tmra.o(i.TMRA_ClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMRA_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SRC_TMRA_3_CMP_IrqCallback
</UL>

<P><STRONG><a name="[1cc]"></a>TMRA_GetCountValue</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hc32_ll_tmra.o(i.TMRA_GetCountValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMRA_GetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Decision_S
</UL>

<P><STRONG><a name="[1ae]"></a>TMRA_Init</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, hc32_ll_tmra.o(i.TMRA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMRA_Init &rArr; TMRA_SetPeriodValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_SetPeriodValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimerACfg
</UL>

<P><STRONG><a name="[1af]"></a>TMRA_IntCmd</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, hc32_ll_tmra.o(i.TMRA_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMRA_IntCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Decision_S
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Move_S
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimerACfg
</UL>

<P><STRONG><a name="[1b2]"></a>TMRA_PWM_Init</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, hc32_ll_tmra.o(i.TMRA_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMRA_PWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimerACfg
</UL>

<P><STRONG><a name="[1b4]"></a>TMRA_PWM_OutputCmd</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hc32_ll_tmra.o(i.TMRA_PWM_OutputCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMRA_PWM_OutputCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Decision_S
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Move_S
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimerACfg
</UL>

<P><STRONG><a name="[1b1]"></a>TMRA_PWM_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hc32_ll_tmra.o(i.TMRA_PWM_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimerACfg
</UL>

<P><STRONG><a name="[1cd]"></a>TMRA_SetCompareValue</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, hc32_ll_tmra.o(i.TMRA_SetCompareValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMRA_SetCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Decision_S
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Move_S
</UL>

<P><STRONG><a name="[1cf]"></a>TMRA_SetCountValue</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc32_ll_tmra.o(i.TMRA_SetCountValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMRA_SetCountValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Move_S
</UL>

<P><STRONG><a name="[1b3]"></a>TMRA_SetFunc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, hc32_ll_tmra.o(i.TMRA_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMRA_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimerACfg
</UL>

<P><STRONG><a name="[1d1]"></a>TMRA_SetPeriodValue</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc32_ll_tmra.o(i.TMRA_SetPeriodValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMRA_SetPeriodValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_Init
</UL>

<P><STRONG><a name="[1b0]"></a>TMRA_Start</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hc32_ll_tmra.o(i.TMRA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMRA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimerACfg
</UL>

<P><STRONG><a name="[1ad]"></a>TMRA_StructInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hc32_ll_tmra.o(i.TMRA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimerACfg
</UL>

<P><STRONG><a name="[168]"></a>USART1_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART1_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[169]"></a>USART1_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART1_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[16a]"></a>USART1_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART1_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[16b]"></a>USART1_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART1_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[16c]"></a>USART1_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART1_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[16d]"></a>USART2_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART2_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[16e]"></a>USART2_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART2_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[16f]"></a>USART2_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART2_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[170]"></a>USART2_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART2_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[171]"></a>USART2_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART2_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[172]"></a>USART3_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART3_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[173]"></a>USART3_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART3_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[174]"></a>USART3_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART3_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[175]"></a>USART3_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART3_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[176]"></a>USART3_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART3_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[177]"></a>USART4_RxError_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART4_RxError_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[178]"></a>USART4_RxFull_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART4_RxFull_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[179]"></a>USART4_RxTO_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART4_RxTO_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[17a]"></a>USART4_TxComplete_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART4_TxComplete_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[17b]"></a>USART4_TxEmpty_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USART4_TxEmpty_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ137_Handler
</UL>

<P><STRONG><a name="[17c]"></a>USBFS_Global_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.USBFS_Global_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ136_Handler
</UL>

<P><STRONG><a name="[17d]"></a>WDT_IrqHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32f460_ll_interrupts_share.o(i.WDT_IrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ141_Handler
</UL>

<P><STRONG><a name="[1d7]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[1d2]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[1d4]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[1d5]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[1e5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1e6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1d6]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[1e8]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, expf.o(i.expf), UNUSED)

<P><STRONG><a name="[1bf]"></a>expf</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, expf.o(i.expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calcspeed_e
</UL>

<P><STRONG><a name="[9a]"></a>main</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = main &rArr; Stepper_Move_S &rArr; Calcspeed_e &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_start
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Move_S
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimerACfg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SPIxCfg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PortCfg
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IntCfg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ClkCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1bc]"></a>Calcspeed_e</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, control_step.o(i.Calcspeed_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Calcspeed_e &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper_Move_S
</UL>

<P><STRONG><a name="[9d]"></a>INT_SRC_TMRA_1_OVF_IrqCallback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tim.o(i.INT_SRC_TMRA_1_OVF_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = INT_SRC_TMRA_1_OVF_IrqCallback &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim.o(i.App_IntCfg)
</UL>
<P><STRONG><a name="[9e]"></a>INT_SRC_TMRA_3_CMP_IrqCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tim.o(i.INT_SRC_TMRA_3_CMP_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = INT_SRC_TMRA_3_CMP_IrqCallback &rArr; Speed_Decision_S &rArr; TMRA_SetCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMRA_ClearStatus
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Decision_S
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tim.o(i.App_IntCfg)
</UL>
<P><STRONG><a name="[9f]"></a>INT_SRC_TMRA_3_OVF_IrqCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tim.o(i.INT_SRC_TMRA_3_OVF_IrqCallback))
<BR>[Address Reference Count : 1]<UL><LI> tim.o(i.App_IntCfg)
</UL>
<P><STRONG><a name="[199]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tim.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IntCfg
</UL>

<P><STRONG><a name="[19b]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tim.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IntCfg
</UL>

<P><STRONG><a name="[19a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tim.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_IntCfg
</UL>

<P><STRONG><a name="[1c8]"></a>PWC_REG_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32_ll.o(i.PWC_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[1c6]"></a>PWC_REG_Unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32_ll.o(i.PWC_REG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[1b7]"></a>CLK_WaitStable</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hc32_ll_clk.o(i.CLK_WaitStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
</UL>

<P><STRONG><a name="[1b8]"></a>SetSysClockDiv</STRONG> (Thumb, 746 bytes, Stack size 32 bytes, hc32_ll_clk.o(i.SetSysClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetSysClockDiv &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
</UL>

<P><STRONG><a name="[1ba]"></a>SetSysClockSrc</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, hc32_ll_clk.o(i.SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetSysClockSrc &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
